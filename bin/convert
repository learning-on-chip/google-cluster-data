#!/bin/bash

set -e

bin_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
data_path="${1}"
table_name="${2}"
database_path="${3}"
column_indices="${4}"

function execute() {
  echo "${2}" | sqlite3 "${1}"
}

function join() {
  local IFS="${1}"
  shift
  echo "$*"
}

function range() {
  echo "$(seq 0 $((${1} - 1)))"
}

i=0
declare -a all_column_definitions
while IFS=$'\n' read -r line_data; do
  all_column_definitions[i]="${line_data}"
  i=$((i + 1))
done < <("${bin_path}/describe" ${table_name})

if [ -z "${column_indices}" ]; then
  column_count=${#all_column_definitions[@]}
  column_indices=($(range ${column_count}))
else
  column_indices=(${column_indices})
  column_count=${#column_indices[@]}
fi

for i in $(range ${column_count}); do
  column_definitions[${i}]=${all_column_definitions[${column_indices[${i}]}]}
  column_indices[${i}]=$((${column_indices[${i}]} + 1))
done

temporary_path="${data_path}.tmp"

setup_query="""
DROP TABLE IF EXISTS \`${table_name}\`;
CREATE TABLE \`${table_name}\` ($(join ', ' "${column_definitions[@]}"));
"""

write_query="""
.mode csv
.import ${temporary_path} ${table_name}
"""

if [ ! -z "${database_path}" ]; then
  execute "${database_path}" "${setup_query}"
fi

for part_path in $(find "${data_path}" -name '*.csv*' | sort); do
  echo "Processing ${part_path}..."
  case "${part_path}" in
  *.csv)
    part_database_path="${part_path%.csv}.sqlite3"
    cp "${part_path}" "${temporary_path}"
    ;;
  *.csv.gz)
    part_database_path="${part_path%.csv.gz}.sqlite3"
    gunzip -c "${part_path}" | cut -d',' -f$(join ',' ${column_indices[@]}) > "${temporary_path}"
    ;;
  *)
    echo 'Error: found an unsupported format.' && exit 1
    ;;
  esac
  if [ ! -z "${database_path}" ]; then
    execute "${database_path}" "${write_query}"
  else
    execute "${part_database_path}" "${setup_query}${write_query}"
  fi
  rm "${temporary_path}"
done
