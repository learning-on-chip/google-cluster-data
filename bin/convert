#!/usr/bin/env python3

import argparse
import glob
import os
import shutil
import subprocess


class SQLite3:
    def __init__(self, table, select):
        columns = SQLite3._describe(table)
        if select is not None:
            columns = [columns[i] for i in select]
        self.setup_code = \
            'DROP TABLE IF EXISTS `{}`;\n'.format(table) + \
            'CREATE TABLE `{}` ({});\n'.format(table, ', '.join(columns))
        self.write_code = \
            '.mode csv\n' + \
            '.import {} ' + table
        self.seen_paths = {}

    def process(self, input_path, output_path):
        if output_path is None:
            output_path = input_path.replace('.csv', '.sqlite3')
        code = self.write_code.format(input_path)
        if output_path not in self.seen_paths:
            code = self.setup_code + code
            self.seen_paths[output_path] = True
        SQLite3._query(output_path, code)

    def _describe(table):
        if table == 'job_events':
            return [
                '`time` INTEGER NOT NULL',
                '`missing info` INTEGER',
                '`job ID` INTEGER NOT NULL',
                '`event type` INTEGER NOT NULL',
                '`user` TEXT',
                '`scheduling class` INTEGER',
                '`job name` TEXT',
                '`logical job name` TEXT',
            ]
        elif table == 'task_events':
            return [
                '`time` INTEGER NOT NULL',
                '`missing info` INTEGER',
                '`job ID` INTEGER NOT NULL',
                '`task index` INTEGER NOT NULL',
                '`machine ID` INTEGER',
                '`event type` INTEGER NOT NULL',
                '`user` TEXT',
                '`scheduling class` INTEGER',
                '`priority` INTEGER NOT NULL',
                '`CPU request` REAL',
                '`memory request` REAL',
                '`disk space request` REAL',
                '`different machines restriction` INTEGER',
            ]
        elif table == 'task_usage':
            return [
                '`start time` INTEGER NOT NULL',
                '`end time` INTEGER NOT NULL',
                '`job ID` INTEGER NOT NULL',
                '`task index` INTEGER NOT NULL',
                '`machine ID` INTEGER NOT NULL',
                '`CPU rate` REAL',
                '`canonical memory usage` REAL',
                '`assigned memory usage` REAL',
                '`unmapped page cache` REAL',
                '`total page cache` REAL',
                '`maximum memory usage` REAL',
                '`disk IO time` REAL',
                '`local disk space usage` REAL',
                '`maximum CPU rate` REAL',
                '`maximum disk IO time` REAL',
                '`cycles per instruction` REAL',
                '`memory accesses per instruction` REAL',
                '`sample portion` REAL',
                '`aggregation type` INTEGER',
                '`sampled CPU usage` REAL',
            ]
        raise Exception('found an unknown table')

    def _query(path, code):
        run('echo "{}" | sqlite3 "{}"'.format(code.replace('`', '\`'), path))


def run(command):
    status, _ = subprocess.getstatusoutput(command)
    if status != 0:
        raise Exception('failed to run a command')

def main(input_path, table, select, output_path, format):
    if select is not None:
        select = [int(i) for i in select.split(',')]
    if format == 'sqlite3':
        format = SQLite3(table, select)
    else:
        raise Exception('found an unsupported format')
    pattern = os.path.join(input_path, '**/*.csv*')
    for part_path in sorted(glob.glob(pattern, recursive=True)):
        print('Processing {}...'.format(part_path))
        if part_path.endswith('.csv'):
            format.process(part_path, output_path)
        elif part_path.endswith('.csv.gz'):
            temporary_path = part_path.replace('.gz', '')
            if select is None:
                run('gunzip -c "{}" > "{}"'.format(part_path, temporary_path))
            else:
                run('gunzip -c "{}" | cut -d"," -f{} > "{}"'.format(
                    part_path, ','.join([str(i + 1) for i in select]),
                    temporary_path))
            format.process(temporary_path, output_path)
            os.remove(temporary_path)
        else:
            raise Exception('found an unsupported format')

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--input', required=True)
    parser.add_argument('--table', required=True)
    parser.add_argument('--select')
    parser.add_argument('--output')
    parser.add_argument('--format', required=True)
    arguments = parser.parse_args()
    main(arguments.input, arguments.table, arguments.select, arguments.output,
         arguments.format)
