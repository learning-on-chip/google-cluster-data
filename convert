#!/bin/bash

set -e

database_path=google.sqlite3

function join() {
    local IFS="${1}";
    shift;
    echo "$*";
}

function run() {
    echo "${1}" | sqlite3 "${database_path}"
}

table="${1}"
ids="${2}"

case "${table}" in
    'job_events')
        columns=(
            '`time` INTEGER NOT NULL'
            '`missing info` INTEGER'
            '`job ID` INTEGER NOT NULL'
            '`event type` INTEGER NOT NULL'
            '`user` TEXT'
            '`scheduling class` INTEGER'
            '`job name` TEXT'
            '`logical job name` TEXT'
        )
    ;;
    'task_events')
        columns=(
            '`time` INTEGER NOT NULL'
            '`missing info` INTEGER'
            '`job ID` INTEGER NOT NULL'
            '`task index` INTEGER NOT NULL'
            '`machine ID` INTEGER'
            '`event type` INTEGER NOT NULL'
            '`user` TEXT'
            '`scheduling class` INTEGER'
            '`priority` INTEGER NOT NULL'
            '`CPU request` REAL'
            '`memory request` REAL'
            '`disk space request` REAL'
            '`different machines restriction` INTEGER'
        )
    ;;
    'task_usage')
        columns=(
            '`start time` INTEGER NOT NULL'
            '`end time` INTEGER NOT NULL'
            '`job ID` INTEGER NOT NULL'
            '`task index` INTEGER NOT NULL'
            '`machine ID` INTEGER NOT NULL'
            '`CPU rate` REAL'
            '`canonical memory usage` REAL'
            '`assigned memory usage` REAL'
            '`unmapped page cache` REAL'
            '`total page cache` REAL'
            '`maximum memory usage` REAL'
            '`disk IO time` REAL'
            '`local disk space usage` REAL'
            '`maximum CPU rate` REAL'
            '`maximum disk IO time` REAL'
            '`cycles per instruction` REAL'
            '`memory accesses per instruction` REAL'
            '`sample portion` REAL'
            '`aggregation type` INTEGER'
            '`sampled CPU usage` REAL'
        )
    ;;
    *)
        echo 'No table is given, or it is unknown.' && exit -1
    ;;
esac

if [ -z "${ids}" ]; then
    count=${#columns[@]}
    ids=($(seq ${count}))
else
    ids=(${ids})
    count=${#ids[@]}
fi

for i in $(seq ${count}); do
    subcolumns[${i} - 1]=${columns[${ids[${i} - 1]} - 1]}
done

run "DROP TABLE IF EXISTS \`${table}\`;"
run "CREATE TABLE \`${table}\` ($(join ', ' "${subcolumns[@]}"));"

parts=$(find ${table} -name '*.csv.gz' | sort)

for part in ${parts}; do
    echo "Processing ${part}..."
    gunzip -c "${part}" | cut -d',' -f$(join ',' ${ids[@]}) > "${part%.gz}"
    run """
.mode csv
.import ${part%.gz} ${table}
"""
    rm "${part%.gz}"
done
